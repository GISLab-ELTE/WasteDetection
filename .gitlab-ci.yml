variables:
  DS_EXCLUDED_ANALYZERS: gemnasium-python
  IMAGE_NAME_BASE: "$CI_REGISTRY_IMAGE/base"
  IMAGE_NAME_SERVER: "$CI_REGISTRY_IMAGE/server_app"
  
include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  
# Model
model-unittest:
  image: "$IMAGE_NAME_SERVER"
  stage: test
  before_script:
    # Configure shell for Anaconda (called in ~/.bashrc, but in CI the shell is not interactive)
    - source /opt/conda/etc/profile.d/conda.sh
    # Debug info
    - cat /etc/os-release
    - conda info
  script:
    # Activate environment
    - conda activate WasteDetectionServerApp
    # Run unit tests
    - python unittest_model.py

# Webapp
webapp-demo-build:
  image: node:18-bullseye
  stage: build
  script:
    - cd web_app/demo/
    - npm ci
    - npm run build
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - web_app/demo/node_modules/
  artifacts:
    paths:
      - web_app/demo/dist/
    expire_in: 1 week

webapp-homepage-deploy:
  image: ubuntu:latest
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh-add <(echo "$CD_PRIVATE_KEY")
    - ssh -P22 gitlab-deployer@gis.inf.elte.hu "rm -r /var/www/gis/waste-detection/*"
    - scp -P22 -r web_app/homepage/* gitlab-deployer@gis.inf.elte.hu:/var/www/gis/waste-detection/
  environment:
    name: production
    url: https://gis.inf.elte.hu/waste-detection/
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - web_app/**/*
        - .gitlab-ci.yml

webapp-demo-deploy:
  image: ubuntu:latest
  stage: deploy
  dependencies:
    - webapp-demo-build
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh-add <(echo "$CD_PRIVATE_KEY")
    - ssh -P22 gitlab-deployer@gis.inf.elte.hu "rm -r /var/www/gis/waste-detection/demo/*"
    - scp -P22 -r web_app/demo/dist/* gitlab-deployer@gis.inf.elte.hu:/var/www/gis/waste-detection/demo/
  environment:
    name: production
    url: https://gis.inf.elte.hu/waste-detection/demo/
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - web_app/**/*
        - .gitlab-ci.yml

serverapp-build:
  stage: build
  image: docker:latest
  tags:
    - docker
    - docker-socket
  variables:
    IMAGE_FOLDER: server_app
  before_script:
    - docker version
  script:
    # Build Docker images
    - docker build $IMAGE_FOLDER --pull --target base -t "$IMAGE_NAME_BASE:$CI_COMMIT_SHORT_SHA"
    - docker build $IMAGE_FOLDER -t "$IMAGE_NAME_SERVER:$CI_COMMIT_SHORT_SHA"
  after_script:
    # Remove Docker images if job failed or cancelled
    - >
      if [ $CI_JOB_STATUS != 'success' ]; then
        docker image rm "$IMAGE_NAME_BASE:$CI_COMMIT_SHORT_SHA"
        docker image rm "$IMAGE_NAME_SERVER:$CI_COMMIT_SHORT_SHA"
      fi
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - server_app/**/*
        - .gitlab-ci.yml

serverapp-deploy:
  stage: deploy
  image: docker:latest
  tags:
    - docker
    - docker-socket
  before_script:
    - docker version
    # Login to GitLab Container Registry
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # Tag Docker images as latest
    - docker tag "$IMAGE_NAME_BASE:$CI_COMMIT_SHORT_SHA" "$IMAGE_NAME_BASE:latest"
    - docker tag "$IMAGE_NAME_SERVER:$CI_COMMIT_SHORT_SHA" "$IMAGE_NAME_SERVER:latest"
    - docker image rm "$IMAGE_NAME_BASE:$CI_COMMIT_SHORT_SHA"
    - docker image rm "$IMAGE_NAME_SERVER:$CI_COMMIT_SHORT_SHA"
    # Push Docker images to registries
    - docker push "$IMAGE_NAME_BASE:latest"
    - docker push "$IMAGE_NAME_SERVER:latest"
    # Remove old, now dangling versions of the images
    - docker image ls --filter "dangling=true" --filter "reference=$CI_REGISTRY_IMAGE" --format "{{.ID}}" | xargs docker image rm
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - server_app/**/*
        - .gitlab-ci.yml